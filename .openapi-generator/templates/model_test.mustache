# coding: utf-8

{{>partial_header}}

import unittest
from {{package}}.{{modelPackage}}.{{classFilename}} import {{classname}}

class Test{{classname}}(unittest.TestCase):
    """{{classname}} unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional=False):
        """Test {{classname}}
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
{{#requiredVars}}
        # {{description}}
        # {{paramName}} = {{#isString}}"{{example}}"{{/isString}}{{#isNumeric}}{{example}}{{/isNumeric}}{{#isBinary}}b'bytes_example'{{/isBinary}}{{#isByteArray}}b'bytes_example'{{/isByteArray}}{{#isBoolean}}True{{/isBoolean}}{{#isDate}}datetime.strptime('2013-10-20', '%Y-%m-%d').date(){{/isDate}}{{#isDateTime}}datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'){{/isDateTime}}{{#isFreeFormObject}}{}{{/isFreeFormObject}}{{#isAnyType}}None{{/isAnyType}}{{#isArray}}[{{#items}}{{#isString}}"{{example}}"{{/isString}}{{#isNumeric}}{{example}}{{/isNumeric}}{{/items}}]{{/isArray}}{{#isMap}}{}{{/isMap}}
{{/requiredVars}}

        if include_optional:
{{#optionalVars}}
            # {{description}}
            # {{paramName}} = {{#isString}}"{{example}}"{{/isString}}{{#isNumeric}}{{example}}{{/isNumeric}}{{#isBinary}}b'bytes_example'{{/isBinary}}{{#isByteArray}}b'bytes_example'{{/isByteArray}}{{#isBoolean}}True{{/isBoolean}}{{#isDate}}datetime.strptime('2013-10-20', '%Y-%m-%d').date(){{/isDate}}{{#isDateTime}}datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'){{/isDateTime}}{{#isFreeFormObject}}{}{{/isFreeFormObject}}{{#isAnyType}}None{{/isAnyType}}{{#isArray}}[{{#items}}{{#isString}}"{{example}}"{{/isString}}{{#isNumeric}}{{example}}{{/isNumeric}}{{/items}}]{{/isArray}}{{#isMap}}{}{{/isMap}}
{{/optionalVars}}
            return {{classname}}(
{{#allVars}}
                {{paramName}}={{paramName}}{{#hasMore}},{{/hasMore}}
{{/allVars}}
            )
        else:
            return {{classname}}(
{{#requiredVars}}
                {{paramName}}={{paramName}}{{#hasMore}},{{/hasMore}}
{{/requiredVars}}
            )

    def testMandatoryParams(self):
        """Test {{classname}}"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()