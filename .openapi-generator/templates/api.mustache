# coding: utf-8

{{>partial_header}}

from typing import Dict, List, Optional, Union, Any, TYPE_CHECKING
import requests
import json
from urllib.parse import urljoin

# Import necessary dependencies for API operations  
from pydantic import Field, StrictBytes, StrictStr, field_validator
from typing_extensions import Annotated

# Import models and API client
from ..api_client import ApiClient

# Import models for type hints
if TYPE_CHECKING:
    # Import all possible model classes that might be used as return types
    from ..Model.get_balance200_response import GetBalance200Response
    from ..Model.get_balance401_response import GetBalance401Response
    from ..Model.get_balance403_response import GetBalance403Response
    from ..Model.get_balance404_response import GetBalance404Response
    from ..Model.get_balance429_response import GetBalance429Response
    from ..Model.get_accounts200_response import GetAccounts200Response
    from ..Model.get_statements200_response import GetStatements200Response
    from ..Model.get_statements400_response import GetStatements400Response
    from ..Model.get_batch_detail200_response import GetBatchDetail200Response
    from ..Model.get_batch_detail400_response import GetBatchDetail400Response
    from ..Model.get_transaction_list200_response import GetTransactionList200Response
    from ..Model.get_transaction_list400_response import GetTransactionList400Response
    from ..Model.import_payments200_response import ImportPayments200Response
    from ..Model.import_payments400_response import ImportPayments400Response
    from ..Model.import_payments413_response import ImportPayments413Response
    from ..Model.import_payments415_response import ImportPayments415Response
    from ..Model.exchange_rate_list import ExchangeRateList
    from ..Model.currency_list_simple import CurrencyListSimple

class {{classname}}:
{{#description}}
    """{{.}}"""
{{/description}}

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

{{#operations}}
{{#operation}}
    def {{operationId}}(self{{#allParams}}, {{paramName}}{{^required}}=None{{/required}}{{/allParams}}{{#hasParams}}, **kwargs{{/hasParams}}) -> "{{returnType}}":
{{#notes}}
        """{{notes}}

{{/notes}}
{{#allParams}}
        :param {{paramName}}: {{description}}{{#required}} (required){{/required}}
        :type {{paramName}}: {{dataType}}{{^required}} or None{{/required}}
{{/allParams}}
{{#hasParams}}
        :param _request_timeout: timeout setting for this request
        :type _request_timeout: int, tuple(int, int), optional
        :param _return_http_data_only: response data without head status code and headers
        :type _return_http_data_only: bool, optional
        :param collection_formats: dict of collection formats for path, query, header, and formData parameters.
        :type collection_formats: dict, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will be returned without reading/decoding response data. Default is True.
        :type _preload_content: bool, optional
        :param _request_auth: set to override the auth_settings for an request.
        :type _request_auth: dict, optional
{{/hasParams}}
        :return: Returns the result object.
        :rtype: {{returnType}}
        """
{{#allParams}}
{{#required}}
        if {{paramName}} is None:
            raise ValueError("Missing the required parameter `{{paramName}}` when calling `{{operationId}}`")
{{/required}}
{{/allParams}}

        # Construct URL
        url = self.api_client.configuration.host + "{{path}}"
{{#pathParams}}
        url = url.replace("{" + "{{paramName}}" + "}", str({{paramName}}))
{{/pathParams}}

        # Prepare headers
        headers = {}
{{#headerParams}}
        if {{paramName}} is not None:
            headers["{{baseName}}"] = {{paramName}}
{{/headerParams}}

        # Prepare query parameters
        query_params = {}
{{#queryParams}}
        if {{paramName}} is not None:
            query_params["{{baseName}}"] = {{paramName}}
{{/queryParams}}

        # Prepare request body
        body = None
{{#bodyParam}}
        if {{paramName}} is not None:
            body = {{paramName}}
{{/bodyParam}}

        # Make request
        response = self.api_client.call_api(
            resource_path="{{path}}",
            method="{{httpMethod}}",
            headers=headers,
            query_params=query_params,
            body=body,
            response_type={{#returnType}}"{{returnType}}"{{/returnType}}{{^returnType}}None{{/returnType}},
            **kwargs
        )

        return response

{{/operation}}
{{/operations}}