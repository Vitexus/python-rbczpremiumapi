<?php

/**
 * DownloadStatementApi
 * PHP version 8.1+
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Production
 *
 * ##### API Overview - Accounts list and balance - Transaction overview (also for saving accounts) - Payments import - Statement list and download - FX rates  ##### Authentication Before making a call to Premium API, you need to register your app at our _Developer portal_. This is where you get the **ClientID** that your application must send in the request as `X-IBM-Client-Id`. This is the key that grants your app access to the API.  However, this may not be enough. Your application needs to use mTLS to call most operations here. Thus, you not only need _https_ but also a client certificate issued by us. The exception is two operations for FX rates that are accessible also without a client certificate.  Each bank client/user can issue several certificates. Each certificate can permit different sets of operations (http methods) on different bank accounts. All this must be configured in Internet Banking first by each bank client/user (bank clients need to look under _Settings_ and do not forget to download the certificate at the last step). The certificate is downloaded in **PKCS#12** format as **\\*.p12** file and protected by a password chosen by the bank client/user. Yes, your app needs the password as well to get use of the **\\*p12** file for establishing mTLS connection to the bank.  Client certificates issued in Internet Banking for bank clients/users have limited validity (e.g. **5 years**). However, **each year** certificates are automatically blocked and bank client/user must unblock them in Internet Banking. It is possible to do it in advance and prolong the time before the certificate is blocked. Your app should be prepared for these scenarios and it should communicate such cases to your user in advance to provide seamless service and high user-experience of your app.  ##### Rate Limiting The number of requests in each API operation is limited to 10 per client per sliding second and 5000 per client per sliding day. The exception is the 'Download Statement' operation with the limits lowered to 5 per client per sliding second and 1500 per client per sliding day. This is because it transports potentially sizeable binary files. The consumer must be able to handle HTTP status 429 in case of exceeding these limits.  Response headers `X-RateLimit-Limit-Second` and `X-RateLimit-Limit-Day` show the actual limits configured for the specific operation. Response headers `X-RateLimit-Remaining-Second` and `X-RateLimit-Remaining-Day` are returned to help prevent the limits from being exceeded.  ##### Notes Be aware, that in certain error situations, API can return specific error structures along with 5xx status code, which is not explicitely defined below.  ##### Quick Start Client Feel free to download a <a href=\"assets/PremiumApiClient.java\" download>simple Java client</a> that gives you quick access to our API. 
 *
 * The version of the OpenAPI document: 1.1.20240910
 * Contact: info@vitexsoftware.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PremiumAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use rbczpremiumapi\ApiClient;
use rbczpremiumapi\ApiException;
use rbczpremiumapi\Configuration;
use rbczpremiumapi\HeaderSelector;
use rbczpremiumapi\ObjectSerializer;

/**
 * DownloadStatementApi Class Doc Comment
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DownloadStatementApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex = 0;
    
    /**
     * ClientID obtained from Developer Portal - when you registered your app with us.
     * @var string
     */
    protected string $xIBMClientId = '';

    /**
     * Use the /rbcz/premium/mock/* path for endpoints ?
     */
    protected bool $mockMode = false;
    
    /**
     * the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible. (optional)
     * 
     * @var string Description
     */
    protected string $SUIPAddress = '';

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'download_statement' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new ApiClient();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
        if (method_exists($this->client, 'getXIBMClientId')){
            $this->setXIBMClientId($this->client->getXIBMClientId());
        }
        if (method_exists($this->client, 'getpSUIPAddress')){
            $this->setSUIPAddress($this->client->getpSUIPAddress());
        }
        if (method_exists($this->client, 'getMockMode')){
            $this->setMockMode($this->client->getMockMode());
        }
    }

    /**
     * Keep ClientID obtained from Developer Portal
     * 
     * @param string $clientId Description
     * 
     * @return self
     */
    public function setXIBMClientId($clientId): self
    {
        $this->xIBMClientId = $clientId;
        return $this;
    }
    
    /**
     * Give you ClientID obtained from Developer Portal
     * 
     * @return string
     */
    public function getXIBMClientId(): string
    {
        return $this->xIBMClientId;
    }

    /**
     * @param  string $SUIPAddress IP address of a client 
     */
    public function setSUIPAddress($SUIPAddress): self
    {
        $this->SUIPAddress;
        return $this;
    }
    
    /**
     * @param boolean $mocking Use mocking api for development purposes ?
     */
    public function setMockMode($mocking): self
    {
        $this->mockMode = $mocking;
        return $this;
    }
    
    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): self
    {
        $this->hostIndex = $hostIndex;
        return $this;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation download_statement.
     *
     * @param  str $x_ibm_client_id ClientID obtained from Developer Portal - when you registered your app with us. (required)
     * @param  str $x_request_id Unique request id provided by consumer application for reference and auditing. (required)
     * @param  str $accept_language The Accept-Language request HTTP header is used to determine document  language. Supported languages are &#x60;cs&#x60; and &#x60;en&#x60;. (required)
     * @param  DownloadStatementRequest $request_body request_body (required)
     * @param  str|null $psu_ip_address IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download_statement'] to see the possible values for this operation
     *
     * @throws \rbczpremiumapi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bytearray|GetStatements400Response|GetBalance401Response|GetBalance403Response|GetBalance404Response|GetBalance429Response
     */
    public function download_statement($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address = null, string $contentType = self::contentTypes['download_statement'][0])
    {
        list($response) = $this->download_statementWithHttpInfo($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address, $contentType);
        return $response;
    }

    /**
     * Operation download_statementWithHttpInfo
     *
     * @param  str $x_ibm_client_id ClientID obtained from Developer Portal - when you registered your app with us. (required)
     * @param  str $x_request_id Unique request id provided by consumer application for reference and auditing. (required)
     * @param  str $accept_language The Accept-Language request HTTP header is used to determine document  language. Supported languages are &#x60;cs&#x60; and &#x60;en&#x60;. (required)
     * @param  DownloadStatementRequest $request_body (required)
     * @param  str|null $psu_ip_address IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download_statement'] to see the possible values for this operation
     *
     * @throws \rbczpremiumapi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bytearray|GetStatements400Response|GetBalance401Response|GetBalance403Response|GetBalance404Response|GetBalance429Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function download_statementWithHttpInfo($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address = null, string $contentType = self::contentTypes['download_statement'][0])
    {
        $request = $this->download_statementRequest($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('bytearray' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bytearray' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bytearray', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('GetStatements400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('GetStatements400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'GetStatements400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ('GetBalance401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('GetBalance401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'GetBalance401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('GetBalance403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('GetBalance403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'GetBalance403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('GetBalance404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('GetBalance404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'GetBalance404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('GetBalance429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('GetBalance429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri(),
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'GetBalance429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            $returnType = 'bytearray';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {

                if($statusCode == 204) {
                    $content = [];
                } else {
                        try {
                            $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                        } catch (\JsonException $exception) {
                            throw new ApiException(
                                sprintf(
                                    'Error JSON decoding server response (%s)',
                                    $request->getUri(),
                                ),
                                $statusCode,
                                $response->getHeaders(),
                                $content,
                            );
                        }
                    }
                }

            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bytearray',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'GetStatements400Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'GetBalance401Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'GetBalance403Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'GetBalance404Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'GetBalance429Response',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation download_statementAsync
     *
     * @param  str $x_ibm_client_id ClientID obtained from Developer Portal - when you registered your app with us. (required)
     * @param  str $x_request_id Unique request id provided by consumer application for reference and auditing. (required)
     * @param  str $accept_language The Accept-Language request HTTP header is used to determine document  language. Supported languages are &#x60;cs&#x60; and &#x60;en&#x60;. (required)
     * @param  DownloadStatementRequest $request_body (required)
     * @param  str|null $psu_ip_address IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download_statement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function download_statementAsync($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address = null, string $contentType = self::contentTypes['download_statement'][0])
    {
        return $this->download_statementAsyncWithHttpInfo($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation download_statementAsyncWithHttpInfo
     *
     * @param  str $x_ibm_client_id ClientID obtained from Developer Portal - when you registered your app with us. (required)
     * @param  str $x_request_id Unique request id provided by consumer application for reference and auditing. (required)
     * @param  str $accept_language The Accept-Language request HTTP header is used to determine document  language. Supported languages are &#x60;cs&#x60; and &#x60;en&#x60;. (required)
     * @param  DownloadStatementRequest $request_body (required)
     * @param  str|null $psu_ip_address IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download_statement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function download_statementAsyncWithHttpInfo($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address = null, string $contentType = self::contentTypes['download_statement'][0])
    {
        $returnType = 'bytearray';
        $request = $this->download_statementRequest($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'download_statement'
     *
     * @param  str $x_ibm_client_id ClientID obtained from Developer Portal - when you registered your app with us. (required)
     * @param  str $x_request_id Unique request id provided by consumer application for reference and auditing. (required)
     * @param  str $accept_language The Accept-Language request HTTP header is used to determine document  language. Supported languages are &#x60;cs&#x60; and &#x60;en&#x60;. (required)
     * @param  DownloadStatementRequest $request_body (required)
     * @param  str|null $psu_ip_address IP address of a client - the end IP address of the client application (no server) in IPv4 or IPv6 format. If the bank client (your user) uses a browser by which he accesses your server app, we need to know the IP address of his browser. Always provide the closest IP address to the real end-user possible. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download_statement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function download_statementRequest($x_ibm_client_id, $x_request_id, $accept_language, $request_body, $psu_ip_address = null, string $contentType = self::contentTypes['download_statement'][0])
    {
        $xIBMClientId = $this->getXIBMClientId();
        $pSUIPAddress = $this->SUIPAddress;
        

        // verify the required parameter 'x_ibm_client_id' is set
        if ($x_ibm_client_id === null || (is_array($x_ibm_client_id) && count($x_ibm_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ibm_client_id when calling download_statement'
            );
        }

        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling download_statement'
            );
        }
        if (\strlen((string) $x_request_id) > 60) {
            throw new \InvalidArgumentException('invalid length for "$x_request_id" when calling DownloadStatementApi.download_statement, must be smaller than or equal to 60.');
        }
        if (!preg_match("/[a-zA-Z0-9\-_:]{1,60}/", (string) $x_request_id)) {
            throw new \InvalidArgumentException("invalid value for \"x_request_id\" when calling DownloadStatementApi.download_statement, must conform to the pattern /[a-zA-Z0-9\-_:]{1,60}/.");
        }
        
        // verify the required parameter 'accept_language' is set
        if ($accept_language === null || (is_array($accept_language) && count($accept_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_language when calling download_statement'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling download_statement'
            );
        }

        if ($psu_ip_address !== null && \strlen((string) $psu_ip_address) > 39) {
            throw new \InvalidArgumentException('invalid length for "$psu_ip_address" when calling DownloadStatementApi.download_statement, must be smaller than or equal to 39.');
        }
        
        
        $resourcePath = '/rbcz/premium/api/accounts/statements/download';
        if ($this->mockMode === true) {
            $resourcePath = str_replace('/rbcz/premium/api/', '/rbcz/premium/mock/', $resourcePath);
        }
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ibm_client_id !== null) {
            $headerParams['X-IBM-Client-Id'] = ObjectSerializer::toHeaderValue($x_ibm_client_id);
        }
        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-Id'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];

        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');

            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
