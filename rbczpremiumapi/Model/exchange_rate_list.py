<?php

/**
 * ExchangeRateList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Production
 *
 * ##### API Overview - Accounts list and balance - Transaction overview (also for saving accounts) - Payments import - Statement list and download - FX rates  ##### Authentication Before making a call to Premium API, you need to register your app at our _Developer portal_. This is where you get the **ClientID** that your application must send in the request as `X-IBM-Client-Id`. This is the key that grants your app access to the API.  However, this may not be enough. Your application needs to use mTLS to call most operations here. Thus, you not only need _https_ but also a client certificate issued by us. The exception is two operations for FX rates that are accessible also without a client certificate.  Each bank client/user can issue several certificates. Each certificate can permit different sets of operations (http methods) on different bank accounts. All this must be configured in Internet Banking first by each bank client/user (bank clients need to look under _Settings_ and do not forget to download the certificate at the last step). The certificate is downloaded in **PKCS#12** format as **\\*.p12** file and protected by a password chosen by the bank client/user. Yes, your app needs the password as well to get use of the **\\*p12** file for establishing mTLS connection to the bank.  Client certificates issued in Internet Banking for bank clients/users have limited validity (e.g. **5 years**). However, **each year** certificates are automatically blocked and bank client/user must unblock them in Internet Banking. It is possible to do it in advance and prolong the time before the certificate is blocked. Your app should be prepared for these scenarios and it should communicate such cases to your user in advance to provide seamless service and high user-experience of your app.  ##### Rate Limiting The number of requests in each API operation is limited to 10 per client per sliding second and 5000 per client per sliding day. The exception is the 'Download Statement' operation with the limits lowered to 5 per client per sliding second and 1500 per client per sliding day. This is because it transports potentially sizeable binary files. The consumer must be able to handle HTTP status 429 in case of exceeding these limits.  Response headers `X-RateLimit-Limit-Second` and `X-RateLimit-Limit-Day` show the actual limits configured for the specific operation. Response headers `X-RateLimit-Remaining-Second` and `X-RateLimit-Remaining-Day` are returned to help prevent the limits from being exceeded.  ##### Notes Be aware, that in certain error situations, API can return specific error structures along with 5xx status code, which is not explicitely defined below.  ##### Quick Start Client Feel free to download a <a href=\"assets/PremiumApiClient.java\" download>simple Java client</a> that gives you quick access to our API. 
 *
 * The version of the OpenAPI document: 1.1.20240910
 * Contact: info@vitexsoftware.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace rbczpremiumapi.Model;

use \ArrayAccess;
use \rbczpremiumapi\ObjectSerializer;

/**
 * ExchangeRateList Class Doc Comment
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExchangeRateList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExchangeRateList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'effective_date_from' => 'datetime',
        'effective_date_to' => 'datetime',
        'trading_date' => 'datetime',
        'ordinal_number' => 'int',
        'last_rates' => 'bool',
        'exchange_rates' => 'List[ExchangeRate]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'effective_date_from' => 'date-time',
        'effective_date_to' => 'date-time',
        'trading_date' => 'date-time',
        'ordinal_number' => 'int32',
        'last_rates' => null,
        'exchange_rates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'effective_date_from' => false,
        'effective_date_to' => false,
        'trading_date' => false,
        'ordinal_number' => false,
        'last_rates' => false,
        'exchange_rates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'effective_date_from' => 'effectiveDateFrom',
        'effective_date_to' => 'effectiveDateTo',
        'trading_date' => 'tradingDate',
        'ordinal_number' => 'ordinalNumber',
        'last_rates' => 'lastRates',
        'exchange_rates' => 'exchangeRates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'effective_date_from' => 'setEffectiveDateFrom',
        'effective_date_to' => 'setEffectiveDateTo',
        'trading_date' => 'setTradingDate',
        'ordinal_number' => 'setOrdinalNumber',
        'last_rates' => 'setLastRates',
        'exchange_rates' => 'setExchangeRates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'effective_date_from' => 'getEffectiveDateFrom',
        'effective_date_to' => 'getEffectiveDateTo',
        'trading_date' => 'getTradingDate',
        'ordinal_number' => 'getOrdinalNumber',
        'last_rates' => 'getLastRates',
        'exchange_rates' => 'getExchangeRates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('effective_date_from', $data ?? [], null);
        $this->setIfExists('effective_date_to', $data ?? [], null);
        $this->setIfExists('trading_date', $data ?? [], null);
        $this->setIfExists('ordinal_number', $data ?? [], null);
        $this->setIfExists('last_rates', $data ?? [], null);
        $this->setIfExists('exchange_rates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['effective_date_from'] === null) {
            $invalidProperties[] = "'effective_date_from' can't be null";
        }
        if ($this->container['trading_date'] === null) {
            $invalidProperties[] = "'trading_date' can't be null";
        }
        if ($this->container['ordinal_number'] === null) {
            $invalidProperties[] = "'ordinal_number' can't be null";
        }
        if ($this->container['last_rates'] === null) {
            $invalidProperties[] = "'last_rates' can't be null";
        }
        if ($this->container['exchange_rates'] === null) {
            $invalidProperties[] = "'exchange_rates' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets effective_date_from
     *
     * @return datetime
     */
    public function getEffectiveDateFrom()
    {
        return $this->container['effective_date_from'];
    }

    /**
     * Sets effective_date_from
     *
     * @param datetime $effective_date_from effective_date_from
     *
     * @return self
     */
    public function setEffectiveDateFrom($effective_date_from)
    {
        if (is_null($effective_date_from)) {
            throw new \InvalidArgumentException('non-nullable effective_date_from cannot be null');
        }
        $this->container['effective_date_from'] = $effective_date_from;

        return $this;
    }

    /**
     * Gets effective_date_to
     *
     * @return datetime|null
     */
    public function getEffectiveDateTo()
    {
        return $this->container['effective_date_to'];
    }

    /**
     * Sets effective_date_to
     *
     * @param datetime|null $effective_date_to effective_date_to
     *
     * @return self
     */
    public function setEffectiveDateTo($effective_date_to)
    {
        if (is_null($effective_date_to)) {
            throw new \InvalidArgumentException('non-nullable effective_date_to cannot be null');
        }
        $this->container['effective_date_to'] = $effective_date_to;

        return $this;
    }

    /**
     * Gets trading_date
     *
     * @return datetime
     */
    public function getTradingDate()
    {
        return $this->container['trading_date'];
    }

    /**
     * Sets trading_date
     *
     * @param datetime $trading_date trading_date
     *
     * @return self
     */
    public function setTradingDate($trading_date)
    {
        if (is_null($trading_date)) {
            throw new \InvalidArgumentException('non-nullable trading_date cannot be null');
        }
        $this->container['trading_date'] = $trading_date;

        return $this;
    }

    /**
     * Gets ordinal_number
     *
     * @return int
     */
    public function getOrdinalNumber()
    {
        return $this->container['ordinal_number'];
    }

    /**
     * Sets ordinal_number
     *
     * @param int $ordinal_number ordinal_number
     *
     * @return self
     */
    public function setOrdinalNumber($ordinal_number)
    {
        if (is_null($ordinal_number)) {
            throw new \InvalidArgumentException('non-nullable ordinal_number cannot be null');
        }
        $this->container['ordinal_number'] = $ordinal_number;

        return $this;
    }

    /**
     * Gets last_rates
     *
     * @return bool
     */
    public function getLastRates()
    {
        return $this->container['last_rates'];
    }

    /**
     * Sets last_rates
     *
     * @param bool $last_rates last_rates
     *
     * @return self
     */
    public function setLastRates($last_rates)
    {
        if (is_null($last_rates)) {
            throw new \InvalidArgumentException('non-nullable last_rates cannot be null');
        }
        $this->container['last_rates'] = $last_rates;

        return $this;
    }

    /**
     * Gets exchange_rates
     *
     * @return List[ExchangeRate]
     */
    public function getExchangeRates()
    {
        return $this->container['exchange_rates'];
    }

    /**
     * Sets exchange_rates
     *
     * @param List[ExchangeRate] $exchange_rates exchange_rates
     *
     * @return self
     */
    public function setExchangeRates($exchange_rates)
    {
        if (is_null($exchange_rates)) {
            throw new \InvalidArgumentException('non-nullable exchange_rates cannot be null');
        }
        $this->container['exchange_rates'] = $exchange_rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


