<?php

/**
 * GetBatchDetail200ResponseBatchItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Production
 *
 * ##### API Overview - Accounts list and balance - Transaction overview (also for saving accounts) - Payments import - Statement list and download - FX rates  ##### Authentication Before making a call to Premium API, you need to register your app at our _Developer portal_. This is where you get the **ClientID** that your application must send in the request as `X-IBM-Client-Id`. This is the key that grants your app access to the API.  However, this may not be enough. Your application needs to use mTLS to call most operations here. Thus, you not only need _https_ but also a client certificate issued by us. The exception is two operations for FX rates that are accessible also without a client certificate.  Each bank client/user can issue several certificates. Each certificate can permit different sets of operations (http methods) on different bank accounts. All this must be configured in Internet Banking first by each bank client/user (bank clients need to look under _Settings_ and do not forget to download the certificate at the last step). The certificate is downloaded in **PKCS#12** format as **\\*.p12** file and protected by a password chosen by the bank client/user. Yes, your app needs the password as well to get use of the **\\*p12** file for establishing mTLS connection to the bank.  Client certificates issued in Internet Banking for bank clients/users have limited validity (e.g. **5 years**). However, **each year** certificates are automatically blocked and bank client/user must unblock them in Internet Banking. It is possible to do it in advance and prolong the time before the certificate is blocked. Your app should be prepared for these scenarios and it should communicate such cases to your user in advance to provide seamless service and high user-experience of your app.  ##### Rate Limiting The number of requests in each API operation is limited to 10 per client per sliding second and 5000 per client per sliding day. The exception is the 'Download Statement' operation with the limits lowered to 5 per client per sliding second and 1500 per client per sliding day. This is because it transports potentially sizeable binary files. The consumer must be able to handle HTTP status 429 in case of exceeding these limits.  Response headers `X-RateLimit-Limit-Second` and `X-RateLimit-Limit-Day` show the actual limits configured for the specific operation. Response headers `X-RateLimit-Remaining-Second` and `X-RateLimit-Remaining-Day` are returned to help prevent the limits from being exceeded.  ##### Notes Be aware, that in certain error situations, API can return specific error structures along with 5xx status code, which is not explicitely defined below.  ##### Quick Start Client Feel free to download a <a href=\"assets/PremiumApiClient.java\" download>simple Java client</a> that gives you quick access to our API. 
 *
 * The version of the OpenAPI document: 1.1.20240910
 * Contact: info@vitexsoftware.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace rbczpremiumapi.Model;

use \ArrayAccess;
use \rbczpremiumapi\ObjectSerializer;

/**
 * GetBatchDetail200ResponseBatchItemsInner Class Doc Comment
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetBatchDetail200ResponseBatchItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getBatchDetail_200_response_batchItems_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_info' => 'GetBatchDetail200ResponseBatchItemsInnerAccountInfo',
        'number_of_payments' => 'int',
        'sum_amount' => 'float',
        'sum_amount_currency_id' => 'str',
        'batch_type' => 'str',
        'status' => 'str',
        'assigned_user_name' => 'str',
        'last_change_date_time' => 'datetime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_info' => null,
        'number_of_payments' => null,
        'sum_amount' => 'decimal',
        'sum_amount_currency_id' => null,
        'batch_type' => null,
        'status' => null,
        'assigned_user_name' => null,
        'last_change_date_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_info' => false,
        'number_of_payments' => false,
        'sum_amount' => false,
        'sum_amount_currency_id' => false,
        'batch_type' => false,
        'status' => false,
        'assigned_user_name' => false,
        'last_change_date_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_info' => 'accountInfo',
        'number_of_payments' => 'numberOfPayments',
        'sum_amount' => 'sumAmount',
        'sum_amount_currency_id' => 'sumAmountCurrencyId',
        'batch_type' => 'batchType',
        'status' => 'status',
        'assigned_user_name' => 'assignedUserName',
        'last_change_date_time' => 'lastChangeDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_info' => 'setAccountInfo',
        'number_of_payments' => 'setNumberOfPayments',
        'sum_amount' => 'setSumAmount',
        'sum_amount_currency_id' => 'setSumAmountCurrencyId',
        'batch_type' => 'setBatchType',
        'status' => 'setStatus',
        'assigned_user_name' => 'setAssignedUserName',
        'last_change_date_time' => 'setLastChangeDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_info' => 'getAccountInfo',
        'number_of_payments' => 'getNumberOfPayments',
        'sum_amount' => 'getSumAmount',
        'sum_amount_currency_id' => 'getSumAmountCurrencyId',
        'batch_type' => 'getBatchType',
        'status' => 'getStatus',
        'assigned_user_name' => 'getAssignedUserName',
        'last_change_date_time' => 'getLastChangeDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const Batch_typeEnum_'DPO' = 'DPO';
    public const Batch_typeEnum_'DD' = 'DD';
    public const Batch_typeEnum_'FPO' = 'FPO';
    public const Batch_typeEnum_'SEPA' = 'SEPA';
    public const StatusEnum_'DRAFT' = 'DRAFT';
    public const StatusEnum_'ERROR' = 'ERROR';
    public const StatusEnum_'FOR_SIGN' = 'FOR_SIGN';
    public const StatusEnum_'VERIFIED' = 'VERIFIED';
    public const StatusEnum_'PASSING_TO_BANK' = 'PASSING_TO_BANK';
    public const StatusEnum_'PASSED' = 'PASSED';
    public const StatusEnum_'PASSED_TO_BANK_WITH_ERROR' = 'PASSED_TO_BANK_WITH_ERROR';
    public const StatusEnum_'UNDISCLOSED' = 'UNDISCLOSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatchTypeAllowableValues()
    {
        return [
            self::Batch_typeEnum_'DPO',
            self::Batch_typeEnum_'DD',
            self::Batch_typeEnum_'FPO',
            self::Batch_typeEnum_'SEPA',
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::StatusEnum_'DRAFT',
            self::StatusEnum_'ERROR',
            self::StatusEnum_'FOR_SIGN',
            self::StatusEnum_'VERIFIED',
            self::StatusEnum_'PASSING_TO_BANK',
            self::StatusEnum_'PASSED',
            self::StatusEnum_'PASSED_TO_BANK_WITH_ERROR',
            self::StatusEnum_'UNDISCLOSED',
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_info', $data ?? [], null);
        $this->setIfExists('number_of_payments', $data ?? [], null);
        $this->setIfExists('sum_amount', $data ?? [], null);
        $this->setIfExists('sum_amount_currency_id', $data ?? [], null);
        $this->setIfExists('batch_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('assigned_user_name', $data ?? [], null);
        $this->setIfExists('last_change_date_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sum_amount_currency_id']) && (mb_strlen((string)$this->container['sum_amount_currency_id']) > 3)) {
            $invalidProperties[] = "invalid value for 'sum_amount_currency_id', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sum_amount_currency_id']) && (mb_strlen((string)$this->container['sum_amount_currency_id']) < 3)) {
            $invalidProperties[] = "invalid value for 'sum_amount_currency_id', the character length must be bigger than or equal to 3.";
        }

        $allowedValues = $this->getBatchTypeAllowableValues();
        if (!is_null($this->container['batch_type']) && !in_array($this->container['batch_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'batch_type', must be one of '%s'",
                $this->container['batch_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_info
     *
     * @return GetBatchDetail200ResponseBatchItemsInnerAccountInfo|null
     */
    public function getAccountInfo()
    {
        return $this->container['account_info'];
    }

    /**
     * Sets account_info
     *
     * @param GetBatchDetail200ResponseBatchItemsInnerAccountInfo|null $account_info account_info
     *
     * @return self
     */
    public function setAccountInfo($account_info)
    {
        if (is_null($account_info)) {
            throw new \InvalidArgumentException('non-nullable account_info cannot be null');
        }
        $this->container['account_info'] = $account_info;

        return $this;
    }

    /**
     * Gets number_of_payments
     *
     * @return int|null
     */
    public function getNumberOfPayments()
    {
        return $this->container['number_of_payments'];
    }

    /**
     * Sets number_of_payments
     *
     * @param int|null $number_of_payments Number of payments within the batch
     *
     * @return self
     */
    public function setNumberOfPayments($number_of_payments)
    {
        if (is_null($number_of_payments)) {
            throw new \InvalidArgumentException('non-nullable number_of_payments cannot be null');
        }
        $this->container['number_of_payments'] = $number_of_payments;

        return $this;
    }

    /**
     * Gets sum_amount
     *
     * @return float|null
     */
    public function getSumAmount()
    {
        return $this->container['sum_amount'];
    }

    /**
     * Sets sum_amount
     *
     * @param float|null $sum_amount Sum amount
     *
     * @return self
     */
    public function setSumAmount($sum_amount)
    {
        if (is_null($sum_amount)) {
            throw new \InvalidArgumentException('non-nullable sum_amount cannot be null');
        }
        $this->container['sum_amount'] = $sum_amount;

        return $this;
    }

    /**
     * Gets sum_amount_currency_id
     *
     * @return str|null
     */
    public function getSumAmountCurrencyId()
    {
        return $this->container['sum_amount_currency_id'];
    }

    /**
     * Sets sum_amount_currency_id
     *
     * @param str|null $sum_amount_currency_id The currency folder identification (CATALOG: CURRENCIES)
     *
     * @return self
     */
    public function setSumAmountCurrencyId($sum_amount_currency_id)
    {
        if (is_null($sum_amount_currency_id)) {
            throw new \InvalidArgumentException('non-nullable sum_amount_currency_id cannot be null');
        }
        if ((mb_strlen((string)$sum_amount_currency_id) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sum_amount_currency_id when calling GetBatchDetail200ResponseBatchItemsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen((string)$sum_amount_currency_id) < 3)) {
            throw new \InvalidArgumentException('invalid length for $sum_amount_currency_id when calling GetBatchDetail200ResponseBatchItemsInner., must be bigger than or equal to 3.');
        }

        $this->container['sum_amount_currency_id'] = $sum_amount_currency_id;

        return $this;
    }

    /**
     * Gets batch_type
     *
     * @return str|null
     */
    public function getBatchType()
    {
        return $this->container['batch_type'];
    }

    /**
     * Sets batch_type
     *
     * @param str|null $batch_type Batch transaction package payment type
     *
     * @return self
     */
    public function setBatchType($batch_type)
    {
        if (is_null($batch_type)) {
            throw new \InvalidArgumentException('non-nullable batch_type cannot be null');
        }
        $allowedValues = $this->getBatchTypeAllowableValues();
        if (!in_array($batch_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'batch_type', must be one of '%s'",
                    $batch_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['batch_type'] = $batch_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return str|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param str|null $status Bacth transaction package status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets assigned_user_name
     *
     * @return str|null
     */
    public function getAssignedUserName()
    {
        return $this->container['assigned_user_name'];
    }

    /**
     * Sets assigned_user_name
     *
     * @param str|null $assigned_user_name Name of user assigned to batch transaction package
     *
     * @return self
     */
    public function setAssignedUserName($assigned_user_name)
    {
        if (is_null($assigned_user_name)) {
            throw new \InvalidArgumentException('non-nullable assigned_user_name cannot be null');
        }
        $this->container['assigned_user_name'] = $assigned_user_name;

        return $this;
    }

    /**
     * Gets last_change_date_time
     *
     * @return datetime|null
     */
    public function getLastChangeDateTime()
    {
        return $this->container['last_change_date_time'];
    }

    /**
     * Sets last_change_date_time
     *
     * @param datetime|null $last_change_date_time Date and time of last change of batch transaction package
     *
     * @return self
     */
    public function setLastChangeDateTime($last_change_date_time)
    {
        if (is_null($last_change_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_change_date_time cannot be null');
        }
        $this->container['last_change_date_time'] = $last_change_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


