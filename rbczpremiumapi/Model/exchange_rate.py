<?php

/**
 * ExchangeRate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Production
 *
 * ##### API Overview - Accounts list and balance - Transaction overview (also for saving accounts) - Payments import - Statement list and download - FX rates  ##### Authentication Before making a call to Premium API, you need to register your app at our _Developer portal_. This is where you get the **ClientID** that your application must send in the request as `X-IBM-Client-Id`. This is the key that grants your app access to the API.  However, this may not be enough. Your application needs to use mTLS to call most operations here. Thus, you not only need _https_ but also a client certificate issued by us. The exception is two operations for FX rates that are accessible also without a client certificate.  Each bank client/user can issue several certificates. Each certificate can permit different sets of operations (http methods) on different bank accounts. All this must be configured in Internet Banking first by each bank client/user (bank clients need to look under _Settings_ and do not forget to download the certificate at the last step). The certificate is downloaded in **PKCS#12** format as **\\*.p12** file and protected by a password chosen by the bank client/user. Yes, your app needs the password as well to get use of the **\\*p12** file for establishing mTLS connection to the bank.  Client certificates issued in Internet Banking for bank clients/users have limited validity (e.g. **5 years**). However, **each year** certificates are automatically blocked and bank client/user must unblock them in Internet Banking. It is possible to do it in advance and prolong the time before the certificate is blocked. Your app should be prepared for these scenarios and it should communicate such cases to your user in advance to provide seamless service and high user-experience of your app.  ##### Rate Limiting The number of requests in each API operation is limited to 10 per client per sliding second and 5000 per client per sliding day. The exception is the 'Download Statement' operation with the limits lowered to 5 per client per sliding second and 1500 per client per sliding day. This is because it transports potentially sizeable binary files. The consumer must be able to handle HTTP status 429 in case of exceeding these limits.  Response headers `X-RateLimit-Limit-Second` and `X-RateLimit-Limit-Day` show the actual limits configured for the specific operation. Response headers `X-RateLimit-Remaining-Second` and `X-RateLimit-Remaining-Day` are returned to help prevent the limits from being exceeded.  ##### Notes Be aware, that in certain error situations, API can return specific error structures along with 5xx status code, which is not explicitely defined below.  ##### Quick Start Client Feel free to download a <a href=\"assets/PremiumApiClient.java\" download>simple Java client</a> that gives you quick access to our API. 
 *
 * The version of the OpenAPI document: 1.1.20240910
 * Contact: info@vitexsoftware.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace rbczpremiumapi.Model;

use \ArrayAccess;
use \rbczpremiumapi\ObjectSerializer;

/**
 * ExchangeRate Class Doc Comment
 *
 * @category Class
 * @package  rbczpremiumapi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExchangeRate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExchangeRate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country_flag_path' => 'str',
        'currency_from' => 'str',
        'currency_to' => 'str',
        'exchange_rate_buy' => 'float',
        'exchange_rate_buy_cash' => 'float',
        'exchange_rate_center' => 'float',
        'exchange_rate_center_change' => 'float',
        'exchange_rate_sell' => 'float',
        'exchange_rate_sell_cash' => 'float',
        'exchange_rate_sell_center' => 'float',
        'exchange_rate_sell_center_previous' => 'float',
        'exchange_rate_ecb_rate' => 'float',
        'exchange_rate_ecb_variation' => 'float',
        'fixed_country_code' => 'str',
        'fixed_country_name' => 'str',
        'quotation_type' => 'str',
        'units_from' => 'int',
        'variable_country_code' => 'str',
        'variable_country_name' => 'str'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country_flag_path' => null,
        'currency_from' => null,
        'currency_to' => null,
        'exchange_rate_buy' => 'double',
        'exchange_rate_buy_cash' => 'double',
        'exchange_rate_center' => 'double',
        'exchange_rate_center_change' => 'double',
        'exchange_rate_sell' => 'double',
        'exchange_rate_sell_cash' => 'double',
        'exchange_rate_sell_center' => 'double',
        'exchange_rate_sell_center_previous' => 'double',
        'exchange_rate_ecb_rate' => 'double',
        'exchange_rate_ecb_variation' => 'double',
        'fixed_country_code' => null,
        'fixed_country_name' => null,
        'quotation_type' => null,
        'units_from' => 'int32',
        'variable_country_code' => null,
        'variable_country_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'country_flag_path' => false,
        'currency_from' => false,
        'currency_to' => false,
        'exchange_rate_buy' => false,
        'exchange_rate_buy_cash' => false,
        'exchange_rate_center' => false,
        'exchange_rate_center_change' => false,
        'exchange_rate_sell' => false,
        'exchange_rate_sell_cash' => false,
        'exchange_rate_sell_center' => false,
        'exchange_rate_sell_center_previous' => false,
        'exchange_rate_ecb_rate' => false,
        'exchange_rate_ecb_variation' => false,
        'fixed_country_code' => false,
        'fixed_country_name' => false,
        'quotation_type' => false,
        'units_from' => false,
        'variable_country_code' => false,
        'variable_country_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_flag_path' => 'countryFlagPath',
        'currency_from' => 'currencyFrom',
        'currency_to' => 'currencyTo',
        'exchange_rate_buy' => 'exchangeRateBuy',
        'exchange_rate_buy_cash' => 'exchangeRateBuyCash',
        'exchange_rate_center' => 'exchangeRateCenter',
        'exchange_rate_center_change' => 'exchangeRateCenterChange',
        'exchange_rate_sell' => 'exchangeRateSell',
        'exchange_rate_sell_cash' => 'exchangeRateSellCash',
        'exchange_rate_sell_center' => 'exchangeRateSellCenter',
        'exchange_rate_sell_center_previous' => 'exchangeRateSellCenterPrevious',
        'exchange_rate_ecb_rate' => 'exchangeRateEcbRate',
        'exchange_rate_ecb_variation' => 'exchangeRateEcbVariation',
        'fixed_country_code' => 'fixedCountryCode',
        'fixed_country_name' => 'fixedCountryName',
        'quotation_type' => 'quotationType',
        'units_from' => 'unitsFrom',
        'variable_country_code' => 'variableCountryCode',
        'variable_country_name' => 'variableCountryName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_flag_path' => 'setCountryFlagPath',
        'currency_from' => 'setCurrencyFrom',
        'currency_to' => 'setCurrencyTo',
        'exchange_rate_buy' => 'setExchangeRateBuy',
        'exchange_rate_buy_cash' => 'setExchangeRateBuyCash',
        'exchange_rate_center' => 'setExchangeRateCenter',
        'exchange_rate_center_change' => 'setExchangeRateCenterChange',
        'exchange_rate_sell' => 'setExchangeRateSell',
        'exchange_rate_sell_cash' => 'setExchangeRateSellCash',
        'exchange_rate_sell_center' => 'setExchangeRateSellCenter',
        'exchange_rate_sell_center_previous' => 'setExchangeRateSellCenterPrevious',
        'exchange_rate_ecb_rate' => 'setExchangeRateEcbRate',
        'exchange_rate_ecb_variation' => 'setExchangeRateEcbVariation',
        'fixed_country_code' => 'setFixedCountryCode',
        'fixed_country_name' => 'setFixedCountryName',
        'quotation_type' => 'setQuotationType',
        'units_from' => 'setUnitsFrom',
        'variable_country_code' => 'setVariableCountryCode',
        'variable_country_name' => 'setVariableCountryName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_flag_path' => 'getCountryFlagPath',
        'currency_from' => 'getCurrencyFrom',
        'currency_to' => 'getCurrencyTo',
        'exchange_rate_buy' => 'getExchangeRateBuy',
        'exchange_rate_buy_cash' => 'getExchangeRateBuyCash',
        'exchange_rate_center' => 'getExchangeRateCenter',
        'exchange_rate_center_change' => 'getExchangeRateCenterChange',
        'exchange_rate_sell' => 'getExchangeRateSell',
        'exchange_rate_sell_cash' => 'getExchangeRateSellCash',
        'exchange_rate_sell_center' => 'getExchangeRateSellCenter',
        'exchange_rate_sell_center_previous' => 'getExchangeRateSellCenterPrevious',
        'exchange_rate_ecb_rate' => 'getExchangeRateEcbRate',
        'exchange_rate_ecb_variation' => 'getExchangeRateEcbVariation',
        'fixed_country_code' => 'getFixedCountryCode',
        'fixed_country_name' => 'getFixedCountryName',
        'quotation_type' => 'getQuotationType',
        'units_from' => 'getUnitsFrom',
        'variable_country_code' => 'getVariableCountryCode',
        'variable_country_name' => 'getVariableCountryName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('country_flag_path', $data ?? [], null);
        $this->setIfExists('currency_from', $data ?? [], null);
        $this->setIfExists('currency_to', $data ?? [], null);
        $this->setIfExists('exchange_rate_buy', $data ?? [], null);
        $this->setIfExists('exchange_rate_buy_cash', $data ?? [], null);
        $this->setIfExists('exchange_rate_center', $data ?? [], null);
        $this->setIfExists('exchange_rate_center_change', $data ?? [], null);
        $this->setIfExists('exchange_rate_sell', $data ?? [], null);
        $this->setIfExists('exchange_rate_sell_cash', $data ?? [], null);
        $this->setIfExists('exchange_rate_sell_center', $data ?? [], null);
        $this->setIfExists('exchange_rate_sell_center_previous', $data ?? [], null);
        $this->setIfExists('exchange_rate_ecb_rate', $data ?? [], null);
        $this->setIfExists('exchange_rate_ecb_variation', $data ?? [], null);
        $this->setIfExists('fixed_country_code', $data ?? [], null);
        $this->setIfExists('fixed_country_name', $data ?? [], null);
        $this->setIfExists('quotation_type', $data ?? [], null);
        $this->setIfExists('units_from', $data ?? [], null);
        $this->setIfExists('variable_country_code', $data ?? [], null);
        $this->setIfExists('variable_country_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency_from'] === null) {
            $invalidProperties[] = "'currency_from' can't be null";
        }
        if ((mb_strlen((string)$this->container['currency_from']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_from', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen((string)$this->container['currency_from']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_from', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['currency_to'] === null) {
            $invalidProperties[] = "'currency_to' can't be null";
        }
        if ((mb_strlen((string)$this->container['currency_to']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_to', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen((string)$this->container['currency_to']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_to', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['exchange_rate_buy'] === null) {
            $invalidProperties[] = "'exchange_rate_buy' can't be null";
        }
        if ($this->container['exchange_rate_buy_cash'] === null) {
            $invalidProperties[] = "'exchange_rate_buy_cash' can't be null";
        }
        if ($this->container['exchange_rate_center'] === null) {
            $invalidProperties[] = "'exchange_rate_center' can't be null";
        }
        if ($this->container['exchange_rate_center_change'] === null) {
            $invalidProperties[] = "'exchange_rate_center_change' can't be null";
        }
        if ($this->container['exchange_rate_sell'] === null) {
            $invalidProperties[] = "'exchange_rate_sell' can't be null";
        }
        if ($this->container['exchange_rate_sell_cash'] === null) {
            $invalidProperties[] = "'exchange_rate_sell_cash' can't be null";
        }
        if ($this->container['exchange_rate_sell_center'] === null) {
            $invalidProperties[] = "'exchange_rate_sell_center' can't be null";
        }
        if ($this->container['exchange_rate_sell_center_previous'] === null) {
            $invalidProperties[] = "'exchange_rate_sell_center_previous' can't be null";
        }
        if ($this->container['quotation_type'] === null) {
            $invalidProperties[] = "'quotation_type' can't be null";
        }
        if ($this->container['units_from'] === null) {
            $invalidProperties[] = "'units_from' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_flag_path
     *
     * @return str|null
     */
    public function getCountryFlagPath()
    {
        return $this->container['country_flag_path'];
    }

    /**
     * Sets country_flag_path
     *
     * @param str|null $country_flag_path country_flag_path
     *
     * @return self
     */
    public function setCountryFlagPath($country_flag_path)
    {
        if (is_null($country_flag_path)) {
            throw new \InvalidArgumentException('non-nullable country_flag_path cannot be null');
        }
        $this->container['country_flag_path'] = $country_flag_path;

        return $this;
    }

    /**
     * Gets currency_from
     *
     * @return str
     */
    public function getCurrencyFrom()
    {
        return $this->container['currency_from'];
    }

    /**
     * Sets currency_from
     *
     * @param str $currency_from currency_from
     *
     * @return self
     */
    public function setCurrencyFrom($currency_from)
    {
        if (is_null($currency_from)) {
            throw new \InvalidArgumentException('non-nullable currency_from cannot be null');
        }
        if ((mb_strlen((string)$currency_from) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_from when calling ExchangeRate., must be smaller than or equal to 3.');
        }
        if ((mb_strlen((string)$currency_from) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_from when calling ExchangeRate., must be bigger than or equal to 3.');
        }

        $this->container['currency_from'] = $currency_from;

        return $this;
    }

    /**
     * Gets currency_to
     *
     * @return str
     */
    public function getCurrencyTo()
    {
        return $this->container['currency_to'];
    }

    /**
     * Sets currency_to
     *
     * @param str $currency_to currency_to
     *
     * @return self
     */
    public function setCurrencyTo($currency_to)
    {
        if (is_null($currency_to)) {
            throw new \InvalidArgumentException('non-nullable currency_to cannot be null');
        }
        if ((mb_strlen((string)$currency_to) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_to when calling ExchangeRate., must be smaller than or equal to 3.');
        }
        if ((mb_strlen((string)$currency_to) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_to when calling ExchangeRate., must be bigger than or equal to 3.');
        }

        $this->container['currency_to'] = $currency_to;

        return $this;
    }

    /**
     * Gets exchange_rate_buy
     *
     * @return float
     */
    public function getExchangeRateBuy()
    {
        return $this->container['exchange_rate_buy'];
    }

    /**
     * Sets exchange_rate_buy
     *
     * @param float $exchange_rate_buy exchange_rate_buy
     *
     * @return self
     */
    public function setExchangeRateBuy($exchange_rate_buy)
    {
        if (is_null($exchange_rate_buy)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_buy cannot be null');
        }
        $this->container['exchange_rate_buy'] = $exchange_rate_buy;

        return $this;
    }

    /**
     * Gets exchange_rate_buy_cash
     *
     * @return float
     */
    public function getExchangeRateBuyCash()
    {
        return $this->container['exchange_rate_buy_cash'];
    }

    /**
     * Sets exchange_rate_buy_cash
     *
     * @param float $exchange_rate_buy_cash exchange_rate_buy_cash
     *
     * @return self
     */
    public function setExchangeRateBuyCash($exchange_rate_buy_cash)
    {
        if (is_null($exchange_rate_buy_cash)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_buy_cash cannot be null');
        }
        $this->container['exchange_rate_buy_cash'] = $exchange_rate_buy_cash;

        return $this;
    }

    /**
     * Gets exchange_rate_center
     *
     * @return float
     */
    public function getExchangeRateCenter()
    {
        return $this->container['exchange_rate_center'];
    }

    /**
     * Sets exchange_rate_center
     *
     * @param float $exchange_rate_center exchange_rate_center
     *
     * @return self
     */
    public function setExchangeRateCenter($exchange_rate_center)
    {
        if (is_null($exchange_rate_center)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_center cannot be null');
        }
        $this->container['exchange_rate_center'] = $exchange_rate_center;

        return $this;
    }

    /**
     * Gets exchange_rate_center_change
     *
     * @return float
     */
    public function getExchangeRateCenterChange()
    {
        return $this->container['exchange_rate_center_change'];
    }

    /**
     * Sets exchange_rate_center_change
     *
     * @param float $exchange_rate_center_change exchange_rate_center_change
     *
     * @return self
     */
    public function setExchangeRateCenterChange($exchange_rate_center_change)
    {
        if (is_null($exchange_rate_center_change)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_center_change cannot be null');
        }
        $this->container['exchange_rate_center_change'] = $exchange_rate_center_change;

        return $this;
    }

    /**
     * Gets exchange_rate_sell
     *
     * @return float
     */
    public function getExchangeRateSell()
    {
        return $this->container['exchange_rate_sell'];
    }

    /**
     * Sets exchange_rate_sell
     *
     * @param float $exchange_rate_sell exchange_rate_sell
     *
     * @return self
     */
    public function setExchangeRateSell($exchange_rate_sell)
    {
        if (is_null($exchange_rate_sell)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_sell cannot be null');
        }
        $this->container['exchange_rate_sell'] = $exchange_rate_sell;

        return $this;
    }

    /**
     * Gets exchange_rate_sell_cash
     *
     * @return float
     */
    public function getExchangeRateSellCash()
    {
        return $this->container['exchange_rate_sell_cash'];
    }

    /**
     * Sets exchange_rate_sell_cash
     *
     * @param float $exchange_rate_sell_cash exchange_rate_sell_cash
     *
     * @return self
     */
    public function setExchangeRateSellCash($exchange_rate_sell_cash)
    {
        if (is_null($exchange_rate_sell_cash)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_sell_cash cannot be null');
        }
        $this->container['exchange_rate_sell_cash'] = $exchange_rate_sell_cash;

        return $this;
    }

    /**
     * Gets exchange_rate_sell_center
     *
     * @return float
     */
    public function getExchangeRateSellCenter()
    {
        return $this->container['exchange_rate_sell_center'];
    }

    /**
     * Sets exchange_rate_sell_center
     *
     * @param float $exchange_rate_sell_center exchange_rate_sell_center
     *
     * @return self
     */
    public function setExchangeRateSellCenter($exchange_rate_sell_center)
    {
        if (is_null($exchange_rate_sell_center)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_sell_center cannot be null');
        }
        $this->container['exchange_rate_sell_center'] = $exchange_rate_sell_center;

        return $this;
    }

    /**
     * Gets exchange_rate_sell_center_previous
     *
     * @return float
     */
    public function getExchangeRateSellCenterPrevious()
    {
        return $this->container['exchange_rate_sell_center_previous'];
    }

    /**
     * Sets exchange_rate_sell_center_previous
     *
     * @param float $exchange_rate_sell_center_previous exchange_rate_sell_center_previous
     *
     * @return self
     */
    public function setExchangeRateSellCenterPrevious($exchange_rate_sell_center_previous)
    {
        if (is_null($exchange_rate_sell_center_previous)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_sell_center_previous cannot be null');
        }
        $this->container['exchange_rate_sell_center_previous'] = $exchange_rate_sell_center_previous;

        return $this;
    }

    /**
     * Gets exchange_rate_ecb_rate
     *
     * @return float|null
     */
    public function getExchangeRateEcbRate()
    {
        return $this->container['exchange_rate_ecb_rate'];
    }

    /**
     * Sets exchange_rate_ecb_rate
     *
     * @param float|null $exchange_rate_ecb_rate exchange_rate_ecb_rate
     *
     * @return self
     */
    public function setExchangeRateEcbRate($exchange_rate_ecb_rate)
    {
        if (is_null($exchange_rate_ecb_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_ecb_rate cannot be null');
        }
        $this->container['exchange_rate_ecb_rate'] = $exchange_rate_ecb_rate;

        return $this;
    }

    /**
     * Gets exchange_rate_ecb_variation
     *
     * @return float|null
     */
    public function getExchangeRateEcbVariation()
    {
        return $this->container['exchange_rate_ecb_variation'];
    }

    /**
     * Sets exchange_rate_ecb_variation
     *
     * @param float|null $exchange_rate_ecb_variation exchange_rate_ecb_variation
     *
     * @return self
     */
    public function setExchangeRateEcbVariation($exchange_rate_ecb_variation)
    {
        if (is_null($exchange_rate_ecb_variation)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_ecb_variation cannot be null');
        }
        $this->container['exchange_rate_ecb_variation'] = $exchange_rate_ecb_variation;

        return $this;
    }

    /**
     * Gets fixed_country_code
     *
     * @return str|null
     */
    public function getFixedCountryCode()
    {
        return $this->container['fixed_country_code'];
    }

    /**
     * Sets fixed_country_code
     *
     * @param str|null $fixed_country_code fixed_country_code
     *
     * @return self
     */
    public function setFixedCountryCode($fixed_country_code)
    {
        if (is_null($fixed_country_code)) {
            throw new \InvalidArgumentException('non-nullable fixed_country_code cannot be null');
        }
        $this->container['fixed_country_code'] = $fixed_country_code;

        return $this;
    }

    /**
     * Gets fixed_country_name
     *
     * @return str|null
     */
    public function getFixedCountryName()
    {
        return $this->container['fixed_country_name'];
    }

    /**
     * Sets fixed_country_name
     *
     * @param str|null $fixed_country_name fixed_country_name
     *
     * @return self
     */
    public function setFixedCountryName($fixed_country_name)
    {
        if (is_null($fixed_country_name)) {
            throw new \InvalidArgumentException('non-nullable fixed_country_name cannot be null');
        }
        $this->container['fixed_country_name'] = $fixed_country_name;

        return $this;
    }

    /**
     * Gets quotation_type
     *
     * @return str
     */
    public function getQuotationType()
    {
        return $this->container['quotation_type'];
    }

    /**
     * Sets quotation_type
     *
     * @param str $quotation_type quotation_type
     *
     * @return self
     */
    public function setQuotationType($quotation_type)
    {
        if (is_null($quotation_type)) {
            throw new \InvalidArgumentException('non-nullable quotation_type cannot be null');
        }
        $this->container['quotation_type'] = $quotation_type;

        return $this;
    }

    /**
     * Gets units_from
     *
     * @return int
     */
    public function getUnitsFrom()
    {
        return $this->container['units_from'];
    }

    /**
     * Sets units_from
     *
     * @param int $units_from units_from
     *
     * @return self
     */
    public function setUnitsFrom($units_from)
    {
        if (is_null($units_from)) {
            throw new \InvalidArgumentException('non-nullable units_from cannot be null');
        }
        $this->container['units_from'] = $units_from;

        return $this;
    }

    /**
     * Gets variable_country_code
     *
     * @return str|null
     */
    public function getVariableCountryCode()
    {
        return $this->container['variable_country_code'];
    }

    /**
     * Sets variable_country_code
     *
     * @param str|null $variable_country_code variable_country_code
     *
     * @return self
     */
    public function setVariableCountryCode($variable_country_code)
    {
        if (is_null($variable_country_code)) {
            throw new \InvalidArgumentException('non-nullable variable_country_code cannot be null');
        }
        $this->container['variable_country_code'] = $variable_country_code;

        return $this;
    }

    /**
     * Gets variable_country_name
     *
     * @return str|null
     */
    public function getVariableCountryName()
    {
        return $this->container['variable_country_name'];
    }

    /**
     * Sets variable_country_name
     *
     * @param str|null $variable_country_name variable_country_name
     *
     * @return self
     */
    public function setVariableCountryName($variable_country_name)
    {
        if (is_null($variable_country_name)) {
            throw new \InvalidArgumentException('non-nullable variable_country_name cannot be null');
        }
        $this->container['variable_country_name'] = $variable_country_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


